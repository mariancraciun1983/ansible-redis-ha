#!/usr/bin/env python3
import sys
import logging
from argparse import ArgumentParser
import subprocess
import xml.etree.ElementTree as ET
#
#   redis-sentinel-pcs leader
#   %new_role - new_role

logger = logging.getLogger(__name__)


def configure_logger(debug=False):

    class StdErrFilter(logging.Filter):
        def filter(self, rec):
            return rec.levelno > logging.INFO

    class StdOutFilter(logging.Filter):
        def filter(self, rec):
            return rec.levelno <= logging.INFO

    logger.setLevel(logging.DEBUG if debug else logging.INFO)

    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    outHandler = logging.StreamHandler(stream=sys.stdout)
    outHandler.setLevel(logging.DEBUG)
    outHandler.setFormatter(formatter)
    outHandler.addFilter(StdOutFilter())
    logger.addHandler(outHandler)

    errHandler = logging.StreamHandler(stream=sys.stderr)
    errHandler.setLevel(logging.WARNING)
    errHandler.setFormatter(formatter)
    errHandler.addFilter(StdErrFilter())
    logger.addHandler(errHandler)


class Pcs:

    def get_primary(self):
        args = [
            "cibadmin",
            "--query",
            "--scope",
            "nodes",
            "--xpath",
            "//node[instance_attributes[nvpair[(@name='redis_role') and (@value='primary')]]][1]"
        ]
        # args = ["cat", "redis-sentinel-pcs-sample.xml"]
        logger.debug(str(args))
        try:
            cib = subprocess.check_output(args)
            logger.info('received {cib}')
            return ET.fromstring(cib)
        except Exception as e:
            logger.error(e)
            pass

    def get_primary_id(self):
        primary = self.get_primary()
        if primary:
            return primary.get('uname')
        return None

    def mark_replica(self, name):
        args = ["pcs", "node", "attribute",  str(name), "redis_role=replica"]
        # args = ["echo"] + args
        logger.info('Marking myself {} as replica'.format(name))
        logger.debug(str(args))
        out = subprocess.check_output(args)
        logger.debug(out)

    def mark_primary(self, name):
        current_primary = self.get_primary_id()
        if current_primary:
            if name != current_primary:
                args = ["pcs", "node", "attribute",  str(current_primary), "redis_role=replica"]
                # args = ["echo"] + args
                logger.info('Marking existing primary {} as replica'.format(current_primary))
                logger.debug(str(args))
                out = subprocess.check_output(args)
                logger.debug(out)
        else:
            logger.warning('There is no existing primary')

        args = ["pcs", "node", "attribute", str(name), "redis_role=primary"]
        # args = ["echo"] + args
        logger.info('Marking myself {} as primary'.format(name))
        logger.debug(str(args))
        out = subprocess.check_output(args)
        logger.debug(out)


if __name__ == "__main__":
    required_args = "node_name event_type success".split()
    parser = ArgumentParser(description='Handles updating pacemaker node attributes for rempgr')
    parser.add_argument('node_name', metavar='nodename', type=str, help='Node name')
    parser.add_argument('event_type', metavar='eventtype', type=str, help='Event type')
    configure_logger(True)
    args = parser.parse_args()
    pcs = Pcs()
    logger.info('Received event {}'.format(args.event_type))
    if args.event_type == "leader":
        pcs.mark_primary(args.node_name)
    elif args.event_type == "observer":
        pcs.mark_replica(args.node_name)
    else:
        logger.info('Nothing to do')
    logger.info('Done')
